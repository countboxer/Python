1. What is the difference between "import my_module" and "from my_module import *"?
A. "from my_module import *" pollutes the namespace because having two modules with the same class names can lead to unexpected results.

2. Can you use the unittest module to test if the script is performing the desired changes on your infrastructure while it's running?
A. No, the unittest is only able to verify if the given functions return the proper values on specified inputs.

3. What can we infer by assuming the following code works as expected:
    def computer_programming(developer):
        developer.code()
    jane = PythonDeveloper()
    jill = JavaDeveloper()
    computer_programming(jane)
    computer_programming(jill)
A. Both the PythonDeveloper and JavaDeveloper classes have a method named code.

4. If not using contextlib.ContextDecorator which statement will always be used when working with a context manager?
A. with

5. What are the standard ways of passing arguments to function definitions in Python?
A. *args  or **kwargs

6. How would this look after applying PEP8 styling?

    import docx # installed via pip


    def printme( str ):
        "This prints a passed string into this function"
        print ( str )
        return


    print( printme( 'lip' ) )
A. Like this:
    import docx # installed via pip


    def printme(str):
        "This prints a passed string into this function"
        print (str)
        return


    print(printme('lip'))

7. You would like to use the sys module to add a module from a custom location. The following script fails when you try to import the module, the custom location is: "D:\Projects\" Assume hotstuff is in the folder.
    python
    import sys
    sys.path.append("D:\Projects\")
    import hotstuff
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
    ModuleNotFoundError: No module named 'hotstuff'
Why is the script failing?
A. You must specify the path with raw string or escape the backslashes.

8. What will the result of the following code be?
    from itertools import zip_longest
    a = [1,2,3]
    b = [4,5,6, 10]
    c = [7,8,9, 10]
    for i in zip_longest(a,b,c):
    print(i)
A. (1, 4, 7)(2, 5, 8)(3, 6, 9)(None, 10, 10)
